{
  "articles": [
    {
      "path": "deployment.html",
      "title": "Deployment",
      "description": "Documents the steps for deploying the app (work-in-progress).\n",
      "author": [],
      "contents": "\nUpdating and deploying the\napp\nRunning locally\nThis project is setup as an R package, which means you can set it up\nto run in the same way you would any other R package that isn‚Äôt on CRAN.\nRun devtools::install_github(\"tarensanders/screen_viz\") to\ninstall the package locally.\nBefore you can run it, you will need to make sure that app can access\ndata from Cloudstor. To do this, you need two things:\nAccess to the folder Shared/screenviz on Cloudstor (ask\nTaren for access if you don‚Äôt have it).\nA set of environment variables to provide the app with API access to\nthe folder. These should be called CLOUD_USER and\nCLOUD_PASS. See the Cloudstor\ndocumentation for how to create and app password. The easiest way to\nedit your R environment is to use\nusethis::edit_r_environ(), then restart the session.\nYou can then run the app with\nscreenviz::screenviz_app().\nMaking changes\nTo make edits to the app, you need a slightly different workflow.\nNote that you still need the requirements (folder access and environment\nvariables) to run the app.\nClone the GitHub Repo using\nwhatever workflow you like.\nInstall the project dependencies using\ndevtools::install_deps() and (optionally)\ndevtools::install_dev_deps().\nTo check everything is setup, you can run\ndevtools::check() or devtools::install().\nYou can then run the app with devtools::load_all();\ndevtools::screenviz_app(), or by sourcing\napp.R.\nTo make changes, you need to commit changes to a new branch and open\na PR to merge to either main or dev. You\ncannot make changes directly to main. Before opening a PR,\nmake sure to run devtools::check() and\ndevtools::install() to check for build errors. If your\nchange adds new functions, please try to include a test and ensure it\nruns with devtools::test().\nPRs to main or dev will run\nR-CMD-CHECK using GitHub actions, and when the pull request\nis merged it will automatically be deployed to either the live app or\nthe dev version.\nUpdating this website\nUpdate non-article pages\nTo update the non-article components of the site, run the following\ncommands from the project root:\n\n\nrmarkdown::render_site(\"docs\")\n\n\n\nNote that this won‚Äôt rerun any of the files in\ndocs/_articles. Those need to be rerendered before the site\nis updated. The changes can then be pushed to GitHub to update the\npages. Note that the changes are only visible if made in the\nmain branch.\nUpdate/create an article page\nThe steps for creating or updating an article are:\nCreate a new article in docs/_articles with\noutput: distill::distill_article as the output.\nOnce written, knit the article using whatever method you like (knit\nbutton, call to rmarkdown, etc).\nThe steps for a new non-article page are:\nCreate an Rmd file in the docs folder with site:\ndistill::distill_website as the output.\nThere‚Äôs no need to render these, as it‚Äôs done when the site is\nupdated.\nRegardless of if it is an article or just a page, the following steps\nare required:\nMake sure that the page is accessible somehow. Most likely that\nmeans updating _site.yml to include a link in the\nnavbar.\nRender the site using rmarkdown::render_site(\"docs\")\nfrom the project root.\nPush changes to GitHub. Once merged into main, the\nGitHub pages will update automatically.\n\n\n\n",
      "last_modified": "2022-06-04T23:31:32+10:00"
    },
    {
      "path": "draftapp.html",
      "title": "Draft App",
      "description": "The draft version of the app.\n",
      "author": [],
      "contents": "\nNotes\nSome things to keep in mind:\nThis is using ‚Äòsimulated‚Äô data because the format of the dataset\nisn‚Äôt exactly right. But, the exposure/outcome combinations are\nonly those that occur in the data.\nWhen you reach the ‚Äòdeepest‚Äô part of the graph, clicking on an\nexposure/outcome combination should bring up the associated metadata,\nbut it‚Äôs not implemented yet. That screen is next on my list.\nThere‚Äôs currently no filter for age, but this is on my list.\nThe CSS works OK for normal size screens, but is not responsive\nenough for mobile.\nSome components are a bit laggy, but that will be fixed down the\nroad.\nYou can view the full-page version of the app here.\n\n\n\n\n\n",
      "last_modified": "2022-06-04T23:31:33+10:00"
    },
    {
      "path": "index.html",
      "title": "Screen Time Vizualization Development",
      "description": "Project logs and notes for the development of the Screen Time Vizualization.\n",
      "author": [],
      "contents": "\nWelcome üëã\nThe purpose of this site is to host all of the files and notes\nrelated to the development of the Screen Time Vizualization.\nProviding Feedback\nProviding feedback on interactive documents is tricky. At the bottom\nof each page is a giscus comment box.\nComments made here are sent to the discussions\npage on GitHub. In order to add comments, you will need to sign in to\nGitHub and authorise the giscus app to make\ncomments on your behalf (don‚Äôt worry, this is safe). Here is my\nproposed workflow:\nFor each piece of feedback or idea, create a new comment.\nYou can reply to someone else‚Äôs (or your own) comment to keep ideas\ntogether, or upvote it if you think it is a good idea.\nYou‚Äôll recieve notifications from GitHub (√† la Google Docs) when\nsomeone responds to your comment. You can always turn these off.\nTo action feedback, I‚Äôll create a GitHub issue linked to the\ncomment, and respond to the comment when that issue is resolved.\nYou can also just post directly on the discussions\npage, or email me feedback.\nLinks üîó\nProject Rationale\nContains the rationale for the project and the objectives.\nProject\nSketches\nThese are the early mockups of the design. The focus is mostly on\nwhat idiom best displays the information, rather than on the actual\nstyle and design. That is: ‚Äúis this information clearer as a bar chart\nor heatmap?‚Äù, rather than ‚Äúdoes this look good?‚Äù.\nDraft App\nWhen an idiom design is finalised, I‚Äôll translate it into a page in a\nshiny app. The early builds are meant to be quick, so expect default\nstyling and clunky interactions. These get resolved once all of the\nscreens are built.\nRepository\nAll of the code, website pages, feedback, and issues are hosted on\nGitHub.\n\n\n\n",
      "last_modified": "2022-06-04T23:31:33+10:00"
    }
  ],
  "collections": ["articles/articles.json"]
}
